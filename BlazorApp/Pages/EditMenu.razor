@page "/editmenu"

<h3>Takodachi Restaurant</h3>
@using Microsoft.EntityFrameworkCore
@using BlazorApp.Data
@inject IDbContextFactory<RestaurantDbContext> DbFactory

<p>Infinite Ultimate Super better Sugoi Food , Delicious then dog poop</p>

<table class="table">
    <thead>
        <tr>
            <th>FoodId</th>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Score</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var food in foods)
        {
            <tr>
                <td>@food.Id</td>
                <td>@food.Name</td>
                <td>@food.Description</td>
                <td>@food.Price Baht</td>
                <td>@food.Score / 10</td>
            </tr>
        }
    </tbody>
</table>

<EditForm Model="@editModel" OnValidSubmit="@UpdateValidData">
    Select:
    <InputSelect @bind-Value="@SelectedIndex">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
            <option value="">Select Food</option>
        @{
            int count = 0;
            @foreach (var data in foods)
            {
                <option value="@count">@data.Name</option>
                count++;
            }
        }
    </InputSelect>
        <table>
            <tr>
                <td>Name:</td>
                <td><InputText id="Name" @bind-Value="editModel.Name" /></td>
            </tr>
            <tr>
                <td>Description:</td>
                <td><InputText id="description" @bind-Value="editModel.Description" /></td>
            </tr>
            <tr>
                <td>Price:</td>
                <td><InputNumber id="Price" @bind-Value="editModel.Price" min="0" /></td>
            </tr>
            <tr>
                <td>Score:</td>
                <td><InputNumber id="Score" @bind-Value="editModel.Score" min="0" max="10" /></td>
            </tr>
        </table>
   
    <div>
        @if(AddButtonText != "Save")
        {
          <button type="submit" @attributes="UpdateButtonAttrs">Update</button>
        }
    </div>
</EditForm>

<button type="button" @onclick="AddData">@AddButtonText</button>
<button type="button" @onclick="RemoveData" @attributes="RemoveButtonAttrs">Remove</button>

@code {
    private List<RestaurantFood> foods = new();
    private RestaurantFood editModel = new RestaurantFood();

    private int _selectedIndex;
    private int SelectedIndex
    {
        get => _selectedIndex;
        set
        {
            _selectedIndex = value;
            editModel = foods[_selectedIndex];
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        await dbContext.Database.EnsureCreatedAsync();
        foods = dbContext.RestaurantFoods.ToList();
        if (foods.Count > 0 )
        {
            SelectedIndex = 0;
        }
    }

    private bool _isNewAdd = false;
    private string AddButtonText = "Add";

    private bool IsNewAdd
    {
        get => _isNewAdd;
        set
        {
            _isNewAdd = value;
            AddButtonText = (!_isNewAdd) ? "Add" : "Save";
            RemoveButtonAttrs["disabled"] = (!_isNewAdd) ? false : true ;
        }
    }

    private async void AddData()
    {
        if (!IsNewAdd)
        {
            editModel = new();
            IsNewAdd = true;
            return;
        }
        using var dbContext = await DbFactory.CreateDbContextAsync();
        var newData = dbContext.RestaurantFoods.Add(editModel);
        await dbContext.SaveChangesAsync();
        IsNewAdd = false;
        foods = dbContext.RestaurantFoods.ToList();
    }

    private Dictionary<string, object> RemoveButtonAttrs = new()
    {
        {"disabled", false}
    };

    private Dictionary<string, object> UpdateButtonAttrs = new()
    {
        {"disabled", false} 
    };

    private async void RemoveData()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        var newData = dbContext.RestaurantFoods.Remove(editModel);
        await dbContext.SaveChangesAsync();
        foods = dbContext.RestaurantFoods.ToList();
    }

    private async void UpdateValidData()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        var selModel = foods[SelectedIndex];
        selModel.Name = editModel.Name;
        selModel.Description = editModel.Description;
        selModel.Price = editModel.Price;
        selModel.Score = editModel.Score;
        var newData = dbContext.RestaurantFoods.Update(selModel);
        await dbContext.SaveChangesAsync();
    }
}